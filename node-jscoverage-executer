#!/bin/env node

( function() {
    var path = require('path');
    var fs   = require('fs');
    if( !process.env['COVERAGE_DIRECTORY'] )
        process.env['COVERAGE_DIRECTORY'] = path.join( process.cwd(), 'cover' );
    if( !( path.existsSync( process.env['COVERAGE_DIRECTORY'] ) && fs.statSync( process.env['COVERAGE_DIRECTORY'] ).isDirectory() ) )
        fs.mkdirSync( process.env['COVERAGE_DIRECTORY'] );
    var newWriteCoverage;
    ( function() {
        var coveragePath = path.join( process.env['COVERAGE_DIRECTORY'], process.pid + '.json' );
        var whiskey_coverage = require('whiskey/lib/coverage');
        whiskey_coverage.installCoverageHandler();
        var newWriteCoverageStr = process._events.SIGUSR2.toString();
        delete process._events.SIGUSR2;
        //console.log( newWriteCoverageStr );
        newWriteCoverageStr = newWriteCoverageStr.replace( 'function writeCoverage()', 'function newWriteCoverage( signal )' );
        newWriteCoverageStr = newWriteCoverageStr.replace( /([^.])pid([\] ;].)/g, '$1process.pid$2' );
        newWriteCoverageStr = newWriteCoverageStr.replace( /([^.])stringifyCoverage\(/g, '$1whiskey_coverage.stringifyCoverage(' );
        newWriteCoverageStr = newWriteCoverageStr.replace( 'process.exit();', 'process.exit( signal );' );
        //console.log( newWriteCoverageStr );
        //newWriteCoverageStr = newWriteCoverageStr.replace(/\n/g,'');
        //console.log( newWriteCoverageStr );
        newWriteCoverage = eval( '( function() { return ' + newWriteCoverageStr + '; } )()' );
    } )();
    //console.log( "newWriteCoverage :\n", newWriteCoverage );
    var util = require('util');
    var signals = { SIGINT: 2,
                    SIGQUIT: 3,
                    SIGABRT: 6,
                    SIGUSR1: 0,
                    //SIGUSR2: 0
                  };
    Object.keys( signals ).forEach( function( sig ) {
        process.on( sig, ( function() { newWriteCoverage( signals[ sig ] ); } ) );
    } );

} )();

//console.log( "process.argv : \n", process.argv );
( function() {
    replace_argv( function() {
        //console.log( "process.argv : \n", process.argv );
        require( process.argv[1] );
    } );
} )();


function replace_argv( cb ) {
    var fs = require('fs');
    var path = require('path');
    var cp = require('child_process');
    
    var exec_file = path.join( process.cwd(), process.argv[2] );
    ( function( tcb ) {
        if( !( path.existsSync( exec_file ) && fs.statSync( exec_file ).isFile() ) )
            cp.exec( 'which ' + process.argv[2], function( err, stdout, stderr ) {
                if( err && stderr ) {
                    console.error( stderr );
                    process.exit( -1 );
                }
                else if( err )
                    throw err;
                exec_file = stdout.replace(/\n$/,'');
                tcb();
            } );
        else
            tcb();
    } )( function() {
        var new_argv = [ process.argv[0], exec_file ];
        for( var i = 3; i < process.argv.length; i ++ )
            new_argv.push( process.argv[i] );
        process.argv = new_argv;
        cb();
    } );

}
